// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types(in *jlexer.Lexer, out *RulesetSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "foodSpawnChance":
			out.FoodSpawnChance = int(in.Int())
		case "minimumFood":
			out.MinimumFood = int(in.Int())
		case "hazardDamagePerTurn":
			out.HazardDamagePerTurn = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types(out *jwriter.Writer, in RulesetSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FoodSpawnChance != 0 {
		const prefix string = ",\"foodSpawnChance\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.FoodSpawnChance))
	}
	if in.MinimumFood != 0 {
		const prefix string = ",\"minimumFood\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinimumFood))
	}
	if in.HazardDamagePerTurn != 0 {
		const prefix string = ",\"hazardDamagePerTurn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HazardDamagePerTurn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RulesetSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RulesetSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RulesetSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RulesetSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types1(in *jlexer.Lexer, out *Ruleset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "settings":
			(out.Settings).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types1(out *jwriter.Writer, in Ruleset) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if true {
		const prefix string = ",\"settings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Settings).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ruleset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ruleset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ruleset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ruleset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types1(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types2(in *jlexer.Lexer, out *GameState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "game":
			(out.Game).UnmarshalEasyJSON(in)
		case "turn":
			out.Turn = int(in.Int())
		case "board":
			(out.Board).UnmarshalEasyJSON(in)
		case "you":
			(out.You).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types2(out *jwriter.Writer, in GameState) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"game\":"
		first = false
		out.RawString(prefix[1:])
		(in.Game).MarshalEasyJSON(out)
	}
	if in.Turn != 0 {
		const prefix string = ",\"turn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Turn))
	}
	if true {
		const prefix string = ",\"board\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Board).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"you\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.You).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types2(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types3(in *jlexer.Lexer, out *Game) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "ruleset":
			(out.Ruleset).UnmarshalEasyJSON(in)
		case "map":
			out.Map = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "timeout":
			out.Timeout = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types3(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if true {
		const prefix string = ",\"ruleset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Ruleset).MarshalEasyJSON(out)
	}
	if in.Map != "" {
		const prefix string = ",\"map\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Map))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Timeout != 0 {
		const prefix string = ",\"timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Timeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Game) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Game) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types3(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types4(in *jlexer.Lexer, out *Customizations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "color":
			out.Color = string(in.String())
		case "head":
			out.Head = string(in.String())
		case "tail":
			out.Tail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types4(out *jwriter.Writer, in Customizations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Color != "" {
		const prefix string = ",\"color\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Color))
	}
	if in.Head != "" {
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Head))
	}
	if in.Tail != "" {
		const prefix string = ",\"tail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Customizations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Customizations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Customizations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Customizations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types4(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types5(in *jlexer.Lexer, out *Coord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = int(in.Int())
		case "y":
			out.Y = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types5(out *jwriter.Writer, in Coord) {
	out.RawByte('{')
	first := true
	_ = first
	if in.X != 0 {
		const prefix string = ",\"x\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types5(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types6(in *jlexer.Lexer, out *Board) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "food":
			if in.IsNull() {
				in.Skip()
				out.Food = nil
			} else {
				in.Delim('[')
				if out.Food == nil {
					if !in.IsDelim(']') {
						out.Food = make([]Coord, 0, 4)
					} else {
						out.Food = []Coord{}
					}
				} else {
					out.Food = (out.Food)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Coord
					(v1).UnmarshalEasyJSON(in)
					out.Food = append(out.Food, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hazards":
			if in.IsNull() {
				in.Skip()
				out.Hazards = nil
			} else {
				in.Delim('[')
				if out.Hazards == nil {
					if !in.IsDelim(']') {
						out.Hazards = make([]Coord, 0, 4)
					} else {
						out.Hazards = []Coord{}
					}
				} else {
					out.Hazards = (out.Hazards)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Coord
					(v2).UnmarshalEasyJSON(in)
					out.Hazards = append(out.Hazards, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "snakes":
			if in.IsNull() {
				in.Skip()
				out.Snakes = nil
			} else {
				in.Delim('[')
				if out.Snakes == nil {
					if !in.IsDelim(']') {
						out.Snakes = make([]Battlesnake, 0, 0)
					} else {
						out.Snakes = []Battlesnake{}
					}
				} else {
					out.Snakes = (out.Snakes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Battlesnake
					(v3).UnmarshalEasyJSON(in)
					out.Snakes = append(out.Snakes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types6(out *jwriter.Writer, in Board) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	if len(in.Food) != 0 {
		const prefix string = ",\"food\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Food {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Hazards) != 0 {
		const prefix string = ",\"hazards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Hazards {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Snakes) != 0 {
		const prefix string = ",\"snakes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Snakes {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Board) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Board) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Board) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Board) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types6(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types7(in *jlexer.Lexer, out *BattlesnakeMoveResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "move":
			out.Move = string(in.String())
		case "shout":
			out.Shout = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types7(out *jwriter.Writer, in BattlesnakeMoveResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Move != "" {
		const prefix string = ",\"move\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Move))
	}
	if in.Shout != "" {
		const prefix string = ",\"shout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Shout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattlesnakeMoveResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattlesnakeMoveResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattlesnakeMoveResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattlesnakeMoveResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types7(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types8(in *jlexer.Lexer, out *BattlesnakeInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiversion":
			out.APIVersion = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "head":
			out.Head = string(in.String())
		case "tail":
			out.Tail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types8(out *jwriter.Writer, in BattlesnakeInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiversion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	if in.Color != "" {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Color))
	}
	if in.Head != "" {
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Head))
	}
	if in.Tail != "" {
		const prefix string = ",\"tail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattlesnakeInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattlesnakeInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattlesnakeInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattlesnakeInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types8(l, v)
}
func easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types9(in *jlexer.Lexer, out *Battlesnake) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "health":
			out.Health = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]Coord, 0, 4)
					} else {
						out.Body = []Coord{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Coord
					(v10).UnmarshalEasyJSON(in)
					out.Body = append(out.Body, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "head":
			(out.Head).UnmarshalEasyJSON(in)
		case "length":
			out.Length = int(in.Int())
		case "latency":
			out.Latency = string(in.String())
		case "shout":
			out.Shout = string(in.String())
		case "customizations":
			(out.Customizations).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types9(out *jwriter.Writer, in Battlesnake) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Health != 0 {
		const prefix string = ",\"health\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Health))
	}
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Body {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Head).MarshalEasyJSON(out)
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Length))
	}
	if in.Latency != "" {
		const prefix string = ",\"latency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Latency))
	}
	if in.Shout != "" {
		const prefix string = ",\"shout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Shout))
	}
	if true {
		const prefix string = ",\"customizations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Customizations).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Battlesnake) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Battlesnake) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE762775cEncodeGithubComSamyfodilTbLibrarySnake001Types9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Battlesnake) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Battlesnake) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE762775cDecodeGithubComSamyfodilTbLibrarySnake001Types9(l, v)
}
